{% extends "plex/base.html.jinja" %}

{% block head %}
<script>

function uuidv4() {
  return ((1e7).toString() + -1e3 + -4e3 + -8e3 + -1e11).replace(
    /[018]/g,
    function (c) {
      return (
        parseInt(c) ^
        (window.crypto.getRandomValues(new Uint8Array(1))[0] &
          (15 >> (parseInt(c) / 4)))
      ).toString(16);
    }
  );
};

function urlencode(params) {
    return Object.entries(params).map(([name, value]) =>
        `${encodeURIComponent(name)}=${encodeURIComponent(value)}`
    ).join("&");
}

async function getPin() {
    let clientId = localStorage.getItem("plex-client-id");
    if (!clientId) {
        clientId = uuidv4();
        localStorage.setItem("plex-client-id", clientId);
    }

    const headers = {
        "X-Plex-Client-Identifier": clientId,
        {% for name, value in headers.items() %}
        "{{ name }}": "{{ value }}",
        {% endfor %}
    };

    const response = await fetch("https://plex.tv/api/v2/pins?strong=true", {
        method: "POST",
        headers,
    });
    const pin = await response.json();
    return { pin, headers }
}

async function main() {
    const { pin, headers } = await getPin();
    const extra = urlencode({
        p: pin.id.toString(),
        c: headers["X-Plex-Client-Identifier"],
    });
    const query = urlencode({
        "clientID": headers["X-Plex-Client-Identifier"],
        "code": pin.code,
        "forwardUrl": `{{ forward_url }}&${extra}`,
        "context[device][product]": headers["X-Plex-Product"],
    });
    const url = `https://app.plex.tv/auth#!?${query}`;
    window.location.replace(url);
}

main();

</script>
{% endblock %}
